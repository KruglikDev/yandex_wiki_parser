import { Stagehand, Page, BrowserContext } from "@browserbasehq/stagehand";
import StagehandConfig from "./stagehand.config.js";
import chalk from "chalk";
import boxen from "boxen";
import { drawObserveOverlay, clearOverlays, actWithCache } from "./utils.js";
import { z } from "zod";

async function main({
    page,
    context,
    stagehand,
  }: {
  page: Page; // Playwright Page with act, extract, and observe methods
  context: BrowserContext; // Playwright BrowserContext
  stagehand: Stagehand; // Stagehand instance
}) {
  // Navigate to a URL
  await page.goto("https://wiki.yandex.ru/");

  // Click the '–í–æ–π—Ç–∏ –≤ Wiki' button
  await page.act("Click the '–í–æ–π—Ç–∏ –≤ Wiki' button");

  // --- Handling the Yandex ID button click and new tab ---

  // 1. –ù–∞—á–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ï–†–ï–î –∫–ª–∏–∫–æ–º
  const pagePromise = context.waitForEvent('page');

  // 2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  //    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä Playwright –≤–º–µ—Å—Ç–æ act,
  //    –µ—Å–ª–∏ —Å act –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫.
  console.log("Attempting to click the Yandex ID button...");
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç 'Yandex ID'
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ <button> –∏–ª–∏ —Å—Å—ã–ª–∫–∞ <a>, –∏–ª–∏ –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç.
    // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DevTools –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä.
    await page.locator(':text("Yandex ID")').click();
    // –ò–ª–∏, –µ—Å–ª–∏ act —Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –Ω–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:
    // await page.act("Click the button that includes 'Yandex ID' text");
  } catch (error) {
    console.error("Could not click the Yandex ID button:", error);
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è, –¥–∞–ª—å–Ω–µ–π—à–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ
    return;
  }

  console.log("Click initiated, waiting for new page event...");

  // 3. –î–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞ (—Ç.–µ. –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  try {
    const newPage = await pagePromise;
    console.log("New page event received!");
    await newPage.waitForLoadState('domcontentloaded'); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await newPage.bringToFront(); // –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
    console.log("Switched to new tab:", newPage.url());

    const captchaElement = newPage.locator('iframe[title*="SmartCaptcha"]'); // –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è iframe –∫–∞–ø—á–∏

    if (await captchaElement.isVisible()) {
      console.log("CAPTCHA detected. Pausing script for manual solving...");
      console.log("Please solve the CAPTCHA in the browser window and then press 'Resume' in the Playwright Inspector.");

      // –°—Ç–∞–≤–∏–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –ø–∞—É–∑—É
      await newPage.pause(); // <--- –ü–ê–£–ó–ê –ó–î–ï–°–¨

      console.log("Script resumed. Assuming CAPTCHA was solved manually.");
      await newPage.fill('input[name="username"]', 'a.kruglik@keep-calm.ru');
      await page.act("Click Log in button");
      // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
      // await newPage.click('button[type="submit"]'); // –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏
    }
    await newPage.fill('input[name="username"]', 'a.kruglik@keep-calm.ru');
    await page.act("Click Log in button");
    // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å newPage
    // –ù–∞–ø—Ä–∏–º–µ—Ä:
    // await newPage.fill('input[name="username"]', '–≤–∞—à_–ª–æ–≥–∏–Ω');
    // await newPage.fill('input[name="passwd"]', '–≤–∞—à_–ø–∞—Ä–æ–ª—å');
    // await newPage.click('pr');

  } catch (error) {
    console.error("Failed to get the new page or timed out waiting:", error);
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–Ω–æ–≤–∞
    const currentPages = context.pages();
    console.log(`Current pages after timeout/error (${currentPages.length}):`, currentPages.map(p => p.url()));
  }
  // --- End of new tab handling ---

  console.log("Script finished.");
  // // Use act() to take actions on the page
  // await page.act("Click the search box");
  //
  // // Use observe() to plan an action before doing it
  // const [action] = await page.observe(
  //   "Type 'Tell me in one sentence why I should use Stagehand' into the search box",
  // );
  // await drawObserveOverlay(page, [action]); // Highlight the search box
  // await page.waitForTimeout(1000);
  // await clearOverlays(page); // Remove the highlight before typing
  // await page.act(action); // Take
  //
  // // For more on caching, check out our docs: https://docs.stagehand.dev/examples/caching
  // await actWithCache(page, "Click the suggestion to use AI");
  // await page.waitForTimeout(4000);
  //
  // // Use extract() to extract structured data from the page
  // const { text } = await page.extract({
  //   instruction:
  //     "extract the text of the AI suggestion from the search results",
  //   schema: z.object({
  //     text: z.string(),
  //   }),
  // });
  // stagehand.log({
  //   category: "create-browser-app",
  //   message: `Got AI Suggestion`,
  //   auxiliary: {
  //     text: {
  //       value: text,
  //       type: "string",
  //     },
  //   },
  // });
  // stagehand.log({
  //   category: "create-browser-app",
  //   message: `Metrics`,
  //   auxiliary: {
  //     metrics: {
  //       value: JSON.stringify(stagehand.metrics),
  //       type: "object",
  //     },
  //   },
  // });
}

/**
 * This is the main function that runs when you do npm run start
 *
 * YOU PROBABLY DON'T NEED TO MODIFY ANYTHING BELOW THIS POINT!
 *
 */
async function run() {
  const stagehand = new Stagehand({
    ...StagehandConfig,
  });
  await stagehand.init();

  if (StagehandConfig.env === "BROWSERBASE" && stagehand.browserbaseSessionID) {
    console.log(
      boxen(
        `View this session live in your browser: \n${chalk.blue(
          `https://browserbase.com/sessions/${stagehand.browserbaseSessionID}`,
        )}`,
        {
          title: "Browserbase",
          padding: 1,
          margin: 3,
        },
      ),
    );
  }

  const page = stagehand.page;
  const context = stagehand.context;
  await main({
    page,
    context,
    stagehand,
  });
  // await stagehand.close();
  console.log(
    `\nü§ò Thanks so much for using Stagehand! Reach out to us on Slack if you have any feedback: ${chalk.blue(
      "https://stagehand.dev/slack",
    )}\n`,
  );
}

run();
